// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as storagetransferserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.StorageTransferServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = storagetransferserviceModule.v1.StorageTransferServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = storagetransferserviceModule.v1.StorageTransferServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = storagetransferserviceModule.v1.StorageTransferServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new storagetransferserviceModule.v1.StorageTransferServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.storageTransferServiceStub, undefined);
        await client.initialize();
        assert(client.storageTransferServiceStub);
    });

    it('has close method', () => {
        const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getGoogleServiceAccount', () => {
        it('invokes getGoogleServiceAccount without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.GetGoogleServiceAccountRequest());
            request.projectId = '';
            const expectedHeaderRequestParams = "project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.GoogleServiceAccount());
            client.innerApiCalls.getGoogleServiceAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.getGoogleServiceAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGoogleServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getGoogleServiceAccount without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.GetGoogleServiceAccountRequest());
            request.projectId = '';
            const expectedHeaderRequestParams = "project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.GoogleServiceAccount());
            client.innerApiCalls.getGoogleServiceAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getGoogleServiceAccount(
                    request,
                    (err?: Error|null, result?: protos.google.storagetransfer.v1.IGoogleServiceAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGoogleServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getGoogleServiceAccount with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.GetGoogleServiceAccountRequest());
            request.projectId = '';
            const expectedHeaderRequestParams = "project_id=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getGoogleServiceAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getGoogleServiceAccount(request), expectedError);
            assert((client.innerApiCalls.getGoogleServiceAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createTransferJob', () => {
        it('invokes createTransferJob without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.CreateTransferJobRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob());
            client.innerApiCalls.createTransferJob = stubSimpleCall(expectedResponse);
            const [response] = await client.createTransferJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTransferJob without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.CreateTransferJobRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob());
            client.innerApiCalls.createTransferJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTransferJob(
                    request,
                    (err?: Error|null, result?: protos.google.storagetransfer.v1.ITransferJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTransferJob with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.CreateTransferJobRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createTransferJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTransferJob(request), expectedError);
            assert((client.innerApiCalls.createTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateTransferJob', () => {
        it('invokes updateTransferJob without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.UpdateTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob());
            client.innerApiCalls.updateTransferJob = stubSimpleCall(expectedResponse);
            const [response] = await client.updateTransferJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateTransferJob without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.UpdateTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob());
            client.innerApiCalls.updateTransferJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTransferJob(
                    request,
                    (err?: Error|null, result?: protos.google.storagetransfer.v1.ITransferJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateTransferJob with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.UpdateTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTransferJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateTransferJob(request), expectedError);
            assert((client.innerApiCalls.updateTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTransferJob', () => {
        it('invokes getTransferJob without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.GetTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob());
            client.innerApiCalls.getTransferJob = stubSimpleCall(expectedResponse);
            const [response] = await client.getTransferJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTransferJob without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.GetTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob());
            client.innerApiCalls.getTransferJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTransferJob(
                    request,
                    (err?: Error|null, result?: protos.google.storagetransfer.v1.ITransferJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTransferJob with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.GetTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTransferJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTransferJob(request), expectedError);
            assert((client.innerApiCalls.getTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('pauseTransferOperation', () => {
        it('invokes pauseTransferOperation without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.PauseTransferOperationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.pauseTransferOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.pauseTransferOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.pauseTransferOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes pauseTransferOperation without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.PauseTransferOperationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.pauseTransferOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.pauseTransferOperation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.pauseTransferOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes pauseTransferOperation with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.PauseTransferOperationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.pauseTransferOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.pauseTransferOperation(request), expectedError);
            assert((client.innerApiCalls.pauseTransferOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('resumeTransferOperation', () => {
        it('invokes resumeTransferOperation without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ResumeTransferOperationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.resumeTransferOperation = stubSimpleCall(expectedResponse);
            const [response] = await client.resumeTransferOperation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resumeTransferOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes resumeTransferOperation without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ResumeTransferOperationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.resumeTransferOperation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resumeTransferOperation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resumeTransferOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes resumeTransferOperation with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ResumeTransferOperationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.resumeTransferOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.resumeTransferOperation(request), expectedError);
            assert((client.innerApiCalls.resumeTransferOperation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('runTransferJob', () => {
        it('invokes runTransferJob without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.RunTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.runTransferJob = stubLongRunningCall(expectedResponse);
            const [operation] = await client.runTransferJob(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.runTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes runTransferJob without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.RunTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.runTransferJob = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.runTransferJob(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.storagetransfer.v1.ITransferOperation>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.storagetransfer.v1.ITransferOperation>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.runTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes runTransferJob with call error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.RunTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.runTransferJob = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.runTransferJob(request), expectedError);
            assert((client.innerApiCalls.runTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes runTransferJob with LRO error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.RunTransferJobRequest());
            request.jobName = '';
            const expectedHeaderRequestParams = "job_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.runTransferJob = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.runTransferJob(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.runTransferJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRunTransferJobProgress without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRunTransferJobProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRunTransferJobProgress with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRunTransferJobProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listTransferJobs', () => {
        it('invokes listTransferJobs without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
            ];
            client.innerApiCalls.listTransferJobs = stubSimpleCall(expectedResponse);
            const [response] = await client.listTransferJobs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferJobs without error using callback', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
            ];
            client.innerApiCalls.listTransferJobs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTransferJobs(
                    request,
                    (err?: Error|null, result?: protos.google.storagetransfer.v1.ITransferJob[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTransferJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTransferJobs with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listTransferJobs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTransferJobs(request), expectedError);
            assert((client.innerApiCalls.listTransferJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTransferJobsStream without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
            ];
            client.descriptors.page.listTransferJobs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTransferJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storagetransfer.v1.TransferJob[] = [];
                stream.on('data', (response: protos.google.storagetransfer.v1.TransferJob) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTransferJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferJobs, request));
        });

        it('invokes listTransferJobsStream with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listTransferJobs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTransferJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.storagetransfer.v1.TransferJob[] = [];
                stream.on('data', (response: protos.google.storagetransfer.v1.TransferJob) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTransferJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTransferJobs, request));
        });

        it('uses async iteration with listTransferJobs without error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
              generateSampleMessage(new protos.google.storagetransfer.v1.TransferJob()),
            ];
            client.descriptors.page.listTransferJobs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.storagetransfer.v1.ITransferJob[] = [];
            const iterable = client.listTransferJobsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listTransferJobs with error', async () => {
            const client = new storagetransferserviceModule.v1.StorageTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.storagetransfer.v1.ListTransferJobsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listTransferJobs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTransferJobsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.storagetransfer.v1.ITransferJob[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTransferJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });
});
