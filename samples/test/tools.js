// Copyright 2022 Google LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

'use strict';

const {execFileSync} = require('child_process');
const path = require('path');

const {Storage, Bucket} = require('@google-cloud/storage');
const {
  StorageTransferServiceClient,
} = require('@google-cloud/storage-transfer');
const uuid = require('uuid');

class TestBucketManager {
  client = new StorageTransferServiceClient();
  storage = new Storage();

  /**
   *
   */
  _cachedProjectId = '';

  /**
   * @type {Bucket[]}
   */
  gcsBuckets = [];
  s3Buckets = [];

  async getProjectId() {
    if (!this._cachedProjectId) {
      this._cachedProjectId = await this.storage.getProjectId();
    }

    return this._cachedProjectId;
  }

  /**
   * Generates a unique name for GCS and S3 buckets.
   *
   * @returns {string} Name of bucket
   */
  static generateBucketName() {
    return `nodejs-sts-samples-${uuid.v4()}`;
  }

  /**
   * Configures permissions for STS to read/write to the bucket.
   *
   * @param {string} projectId
   * @param {Bucket} bucket
   */
  async grantSTSPermissions(bucket) {
    const [serviceAccount] = await this.client.getGoogleServiceAccount({
      projectId: await this.getProjectId(),
    });
    const email = serviceAccount.accountEmail;

    const objectViewer = 'roles/storage.objectViewer';
    const bucketReader = 'roles/storage.legacyBucketReader';
    const bucketWriter = 'roles/storage.legacyBucketWriter';
    const members = [`serviceAccount:${email}`];

    const [policy] = await bucket.iam.getPolicy({requestedPolicyVersion: 3});

    policy.bindings.push({
      role: objectViewer,
      members: members,
    });

    policy.bindings.push({
      role: bucketReader,
      members: members,
    });

    policy.bindings.push({
      role: bucketWriter,
      members: members,
    });

    await bucket.iam.setPolicy(policy);
  }

  /**
   * Generates a unique GCS bucket for testing.
   * Configures STS read/write perms on the bucket.
   *
   * Is cached for easy clean-up via {#deleteBuckets}.
   *
   * @returns
   */
  async generateGCSBucket() {
    const name = await TestBucketManager.generateBucketName();
    const bucket = this.storage.bucket(name);
    this.gcsBuckets.push(bucket);

    await bucket.create();
    await this.grantSTSPermissions(bucket);

    return bucket;
  }

  /**
   * Deletes generated test buckets.
   */
  async deleteBuckets() {
    for (const bucket of this.gcsBuckets) {
      try {
        await bucket.delete();
      } catch (e) {
        console.error(e);
      }
    }

    for (const bucket of this.s3Buckets) {
      try {
        // await bucket.delete();
      } catch (e) {
        console.error(e);
      }
    }
  }

  /**
   * Deletes a STS transfer job.
   *
   * @param {string} transferJobName the name of the STS Job to delete
   */
  async deleteTransferJob(transferJobName) {
    await this.client.updateTransferJob({
      projectId: await this.getProjectId(),
      jobName: transferJobName,
      transferJob: {
        name: transferJobName,
        status: 'DELETED',
      },
    });
  }
}

/**
 * Runs a sample and returns its output
 *
 * @param {string} sample name of sample to run. No need for '.js' suffix.
 * @param {string[]} args the arguments to pass to the sample
 * @returns {string} output of the command
 */
async function runSample(sample, args = []) {
  return execFileSync('node', [`${sample}.js`, ...args], {
    encoding: 'utf-8',
    cwd: path.join(__dirname, '..'),
  });
}

module.exports = {
  TestBucketManager,
  runSample,
};
